TODO:
    parsing improvements:
        - handle more binary operators
        - correct operator precedence
        X handle chained postfix operators  eg hof()(), aoa[1][2]
        X handle single-argument functions
        X index operator
        - multithread imports
        - better error messages

    parser:
        X unify macro approach (or define grammar combinators)
            - ALL parsing rules should be macro'd
        X improve right-recursive parsing
        X implement something for left-recursive rules
        X parse_program broken??? we are hacking to use block :|
            tricky because EOF acceptable as terminator
        - get rid of the "success" blocks
        - very inefficient, can we improve? side effect of naive rec-desc?
            - nested TRY will help with this; (eg, see parse_if_exp)
            - tighten up the whitespace rules, this will allow to early-out a lot of rules by peeking 1 or 2 chars
        - update "grammar.bnf" :D :D :D
        - specify ast schema, add validation (subclasses?)
        - find a good way of checking exhaustively for ambiguities (and even for resolving them)
            - ordering of TRY is significant in causing ambiguities
            - during parsing, when ambiguity is resolved, can use to generate very specific error messages
            - for now, should be able to:
                - generate error messages at a block level when an incorrect program_part is detected
                - then skip to end of block somehow and attempt to resume

    syntax:
        - can we omit brackets for function literals?

    reference vm:
        X intern functions (source code can only contain so many functions :D)
        - print() semantically broken:
            a = print; a("hello world") should work but won't
            - will tie in with integrating c functions
        - bytecode generation
            - then can cache bytecodes between runs

    jitter:
        - extension of the reference vm

    basic features:
        X strings
        X arrays
        X if/else
        X looping
        X range literals!
        - stdlib
        - comments
        - match?
        - custom data structures
            - labelled product type
            - sum type
        - imports
        - closures somehow
        - remove special string, make list of char

    other:
        - some unit tests!!
        - fix the REPL
            - make the top-level parse a program-part
            - evaluate as we go
            - handle multilines nicely
        - have an optimising compiler
            - type checker
            - [automatic] threading
            - memory management
