# bnf.txt

script 				: decl-list

decl-list 			: decl-list decl
					: decl

decl 				: func-decl
					| var-decl

func-decl			: FUNCTION identifier LPAREN args-list RPAREN LBRACE statement-list RBRACE
	args-list		: identifier
					| args-list COMMA identifier

var-decl			: VAR identifier
					| VAR identifier '=' expression

identifier			: NAME // parse token


statement-block		: LBRACE statement-list RBRACE
statement-list		: statement-list statement
					| statement
statement			| expression SEMI
		 			: return-statement
					| continue-statement
					| break-statement
					| select-construct
					| for-construct
					| while-construct

	return-statement: RETURN expression SEMI
					| RETURN SEMI
	continue-statement:CONTINUE SEMI
	break-statement : BREAK SEMI

select-construct	: if-construct
					| if-construct elseif-list
					| if-construct 				else-construct
					| if-construct elseif-list 	else-construct
	if-construct	: IF LPAREN expression RPAREN statement-block
	elseif-construct: ELSE IF LPAREN expression RPAREN statement-block
	else-construct 	: ELSE statement-block
	elseif-list		: elseif-list elseif-construct
					| elseif-construct

while-construct		: WHILE LPAREN expression RPAREN statement-block
for-construct		: FOR LPAREN expression SEMI expression SEMI expression RPAREN statement-block

OP-ASSIGNMENT		: = 		+= -= *= /= %= 			&= |= ^= <<= >>=
OP-RELATION			: == != < > <= >=
OP-BITSHIFT			: << >>
OP-MUL				: * / %
OP-ADD				: + -
OP-UNARY			: + - ! ~
OP-INC				: ++ --

expression			: assign-exp
	assign-exp 			: identifier OP-ASSIGNMENT assign-exp
						| ternary-exp
	ternary-exp 		: bool-or-exp QUESTION expression COLON ternary-exp
	bool-or-exp 	 	: bool-or-exp OP-BOOLOR bool-and-exp
						| bool-and-exp
	bool-and-exp 		: bool-and-exp OP-BOOLAND bit-or-exp
						| bit-or-exp
	bit-or-exp 			: bit-or-exp OP-BITOR bit-xor-exp
						| bit-xor-exp
	bit-xor-exp 		: bit-xor-exp OP-BITXOR bit-and-exp
						| bit-and-exp
	bit-and-exp 		: bit-and-exp OP-BITAND equality-exp
						| equality-exp
	equality-exp 		: equality-exp OP-EQUALITY relation-exp
						| relation-exp
	relation-exp 		: relation-exp OP-RELATION bit-shift-exp
						| bit-shift-exp
	bit-shift-exp 		: bit-shift-exp OP-BITSHIFT additive-exp
						| add-exp
	add-exp 			: add-exp OP-ADD mul-exp
						| mul-exp
	multiply-exp 		: mul-exp OP-MUL unary-exp
						| unary-exp
	unary-exp			: OP-UNARY unary-exp
						| OP-INC unary-exp
						| postfix-exp
	postfix-exp			: postfix-exp OP-INC
						| postfix-exp DOT identifier
						| postfix-exp array-access-operator
					   	# postfix-exp function-call-operator
						| primary-exp

	primary-exp			: identifier
						| STRING
						| NUMBER
						| LPAREN expression RPAREN

array-access-operator: LBRACKET expression RBRACKET

