" Generate a randomized binary tree, and calculate the longest path from the root containing only unique elements. "
" Note that the `distinct` tracker is implemented with an array "
" which makes it O(N) to check for an existing element in a path "
" once the object type can accept any type as key, this can be improved to O(1)"

export fn make_tree(maxdepth) {
    if maxdepth > 0 {
        let l = null
        let r = null
        if random() < 0xcfff {
            l = make_tree(maxdepth - 1)
        }
        if random() < 0xcfff {
            r = make_tree(maxdepth - 1)
        }

        return {
            left = l,
            right = r,
            data = random() % (maxdepth * 2)
        }
    }
    return null
}

fn print_tree(t) {
    fn f(t, prefix) {
        if t {
            print(     prefix + "data=" + tostring(t.data))
            f(t.left,  prefix + "    ")
            f(t.right, prefix + "    ")
        }
    }
    f(t, "")
}

fn visit(tree, distinct, path_length, dir) {
    if tree.data in distinct {
        return path_length
    }
    path_length = path_length + 1
    
    distinct << tree.data

    let path_length_r = 0
    let path_length_l = 0

    if tree.left != null {
        path_length_l = visit(tree.left, distinct, path_length, "left")
    }
    if tree.right != null {
        path_length_r = visit(tree.right, distinct, path_length, "right")
    }

    distinct >> 1

    return max(path_length_l, path_length_r)
}


fn longest_distinct_path(tree) {
    const distinct = []
    return visit(tree, distinct, 0, "root")
}


const tree = make_tree(8)
print("-------------------------------------------")

print_tree(tree)

const res = longest_distinct_path(tree)
print("-------------------------------------------")
print("RESULT:")
print(res)
print("-------------------------------------------")


fn quicksort(arr) {
    const n = #arr
    if n <= 1 { return arr }

    " find the midpoint "
    let l = min(arr)
    let r = max(arr)
    if r == l { return arr }
    const mid = (l + r) / 2
    
    " split array into upper and lower "
    const upper = filter(arr, fn(x) { return x < mid })
    const lower = filter(arr, fn(x) { return x >= mid })

    " recursively sort the upper and lower sub-arrays and join the result"
    return quicksort(lower) + quicksort(upper)
}

let A = []
for i in 1, 1000000 {
    A << random()
}
let before = clock()
let B = quicksort(A)
let after = clock()
print("Time taken: ", after - before, "seconds")