fn quicksort(arr) {
    const n = #arr
    if n <= 1 {
        return arr
    }

    " find the midpoint "
    let l = min(arr)
    let r = max(arr)
    if r == l {
        return arr
    }
    const mid = (l + r) / 2
    
    " split array into upper and lower "
    const upper = []
    const lower = []
    for i in 0, n {
        const e = arr[i]
        if e < mid {
            lower << e
        } else {
            upper << e
        }
    }

    " recursively sort the upper and lower sub-arrays and join the result"
    return quicksort(lower) + quicksort(upper)
}

" test "
let N = 1e6
let A = []
for i in 0, N {
    A << random()
}

print("Quicksort: ", #A, "elements")

gc_disable()
let before = clock()
let B = quicksort(A)
let after = clock()
gc_enable()
print("Time taken: ", after - before)

for i in 0, #B-1 {
    if B[i] > B[i+1] {
        print("Incorrect result")
    }
}

if N < 1001 {
    print(A)
    print(B)
}