{ 0 or more }
[ 0 or 1 ]



// PROGRAM

program         = { declaration | assignment | expression }


program-part    = declaration sep
                | assignment sep
                | expression sep


declaration     = "let" name
                | "let" name '=' expression
assignment      = name assign-op expression



// EXPRESSIONS

expression      = block
                | binary-exp

block           = '{' '}'
                | '{' program '}'

binary-exp      = unary-exp binary-op binary-exp                // precedence : bool x2, compare x6, bit x3, shift x2, add x2, mul x3
                | unary-exp

unary-exp       = unary-op unary-exp
                | postfix-exp

postfix-exp     = postfix-exp calling                           // LEFT RECURSIVE!!
                | primary-exp

calling         = '(' [ param_list ] ')'

param_list      = expression { , expression }

primary-exp     = '(' expression ')'
                | number-literal
                | string-literal
                | func-literal
                | name

name            = `a-zA-Z_{a-z|A-Z|0-9|_}`

number-literal  = ...
string-literal  = ...
func_literal    = '(' [ arg_decl ] ')' '->' expression
arg_decl        = name { , name }
sep             = ';' | '\n'