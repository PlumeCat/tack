            bnf:
                required-rule
                [ 0-or-1 ]
                { 1-or-more }



script:
	[ { import-statement } ]
	[ { func-decl } ]

import-statement:		"import" identifier

func-decl:				"func" identifier "(" [ args-decl ] ")" statement-block

args-decl:				identifier [ "," args-decl ]
						identifier

if-construct:			if-block [ { elseif-block } ] [ else-block ]

if-block:				"if" "(" expression ")" statement-block

elseif-block:			"else" "if" "(" expression ")" statement-block

else-block:				"else" statement-block

while-loop:				"while" "(" expression ")" statement-block

statement-block:		"{" [ { statement } ] "}"

statement:				break-statement
						continue-statement
						return-statement
						assign-statement
						var-statement
						expression-statement

var-statement:			"var" identifier [ "=" expression ]

break-statement: 		"break"
continue-statement: 	"continue"
return-statement:		"return" [ expression ]

assign-statement:		identifier assign-op expression

expression-statement:	expression

expression:				ternary-exp



# operator precedence now increases the lower down we go
# TODO: fix associativity etc...

ternary-exp: 	bool-exp "?" bool-exp ":" bool-exp
				bool-exp
bool-exp:		cmp-exp bool-op bool-exp
				cmp-exp
cmp-exp:		bit-exp cmp-op cmp-exp
				bit-exp
bit-exp:		shift-exp bit-op bit-exp
				shift-exp
shift-exp:		add-exp	shift-op shift-exp
				add-exp
add-exp:		mul-exp add-op add-exp
				mul-exp
mul-exp:		prefix-exp mul-op mul-exp
				prefix-exp
prefix-exp:		prefix-op prefix-exp
				postfix-exp
postfix-exp:	postfix-exp postfix-op
				primary-exp
primary-exp:	"(" expression ")"
				number-literal
				identifier

assign-op		= |= &= ^= <<= >>= += -= *= /= %=
bool-op 		|| &&
bit-op			| & ^
cmp-op			== != < > <= >=
shift-op 		<< >>
add-op 			+ -
mul-op 			* / %
prefix-op 		+ - ~ !
postfix-op 		[] ()
