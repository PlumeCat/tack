fn array_random(M) {
    let i = 0
    const arr = []
    while i < M {
        i = i + 1
        arr << random()
    }
    return arr
}

fn join(a, b) {
    const c = []

    let i = 0
    const na = #a
    while i < na {
        c << a[i]
        i = i + 1
    }

    let j = 0
    const nb = #b
    while j < nb {
        c << b[j]
        j = j + 1
    }

    return c
}

fn quicksort(arr, qs, join) {
    const n = #arr
    if n <= 1 { return arr }

    " min and max "

    let min = arr[0]
    let max = arr[0]
    let i = 1
    while i < n {
        let ai = arr[i]
        if ai > max { max = ai }
        if ai < min { min = ai }
        i = i + 1
    }

    " midpoint "
    if min == max { return arr }
    const mid = (min + max) / 2
    let upper = []
    let lower = []
    print(mid)

    " pivot "
    i = 0
    while i < n {
        let e = arr[i]
        if e < mid { lower << e }
        else { upper << e }
        i = i + 1
    }
    
    print(lower)
    lower = qs(lower, qs, join)
    print(lower)
    
    print(upper)
    upper = qs(upper, qs, join)
    print(upper)

    return join(lower, upper)
}

const N = 5
"let A = array_random(N)"
const A = []
let i = 0
while i < N {
    i = i + 1
    A << random()
}

print(A)
const before = clock()
const B = quicksort(A, quicksort, join)
const after = clock()
print(B)